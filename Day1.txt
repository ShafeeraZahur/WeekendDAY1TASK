1)Difference between HTTP 1.1 and HTTP.
 HTTP 1.1 -> The first usable version of HTTP was created in 1997. Because it went through several stages of development, this first version of HTTP was called HTTP/1.1. This version is still in use on the web.
 Multiplexing in HTTP 1.1 -> It loads resources one after the other, so if one resource cannot be loaded, it blocks all the other resources behind it. In contrast, HTTP/2 is able to use a single TCP connection to send multiple streams of data at once so that no one resource blocks any other resource.
 It works on the textual format.
 There is head of line blocking that blocks all the requests behind it until it doesnâ€™t get its all resources.
 It uses requests resource Inlining for use getting multiple pages.
 It compresses data by itself.

 HTTP 2   -> In 2015, a new version of HTTP called HTTP/2 was created. HTTP/2 solves several problems that the creators of HTTP/1.1 did not anticipate. In particular, HTTP/2 is much faster and more efficient than HTTP/1.1. One of the ways in which HTTP/2 is faster is in how it prioritizes content during the loading process.
 Multiplexing in HTTP 2   -> It does this by splitting data into binary-code messages and numbering these messages so that the client knows which stream each binary message belongs to.
 It works on the binary protocol.
 It allows multiplexing so one TCP connection is required for multiple requests.
 It uses PUSH frame by server that collects all multiple pages.
 It uses HPACK for data compression.

2)Object and its internal representation in javascript.
A JavaScript object has properties associated with it. A property of an object can be explained as a variable that is attached to the object. 
Object properties are basically the same as ordinary JavaScript variables,except for the attachment to objects. The properties of an object 
define the characteristics of the object. You access the properties of an object with a simple dot-notation:
objectName.propertyName
For example,
var myCar = new Object();
myCar.make = 'Ford';
myCar.model = 'Mustang';
myCar.year = 1969;
Properties of JavaScript objects can also be accessed or set using a bracket notation (for more details see property accessors). Objects are
sometimes called associative arrays, since each property is associated with a string value that can be used to access it. So, for example,
you could access the properties of the myCar object as follows:
myCar['make'] = 'Ford';
myCar['model'] = 'Mustang';
myCar['year'] = 1969;

3)IP Address -> Internet Protocol.
The Address that is uniquely given to each and every device thatgets connected over the internet.
  MAC Address -> Media Access Control Address.
The Address given to a device during the Manufacture stage so that its various port gets a physical address which helps them to convert to 
external physical device.
  Port Address -> The port in which each project runs in the browser.